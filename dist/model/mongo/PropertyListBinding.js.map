{"version":3,"sources":["../../../src/ui5/model/mongo/PropertyListBinding.js"],"names":[],"mappings":"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","file":"PropertyListBinding.js","sourcesContent":["/*!\n\n * ${copyright}\n */\n\n\n// Provides an abstraction for list bindings\nsap.ui.define([\n  'jquery.sap.global',\n  'sap/ui/model/ListBinding',\n  'sap/ui/model/Context',\n  'sap/ui/model/ChangeReason'\n], function(jQuery, ListBinding, Context, ChangeReason) {\n  \"use strict\";\n\n  /**\n   * Constructor for PropertyListBinding\n   *\n   * @class\n   * The PropertyListBinding is a specific binding for lists in the model, which can be used\n   * to populate Tables or ItemLists.\n   *\n   * @param {sap.ui.model.Model} oModel\n   * @param {string} sPath\n   * @param {sap.ui.model.Context} oContext\n   * @param {array} [aSorters] initial sort order (can be either a sorter or an array of sorters)\n   * @param {array} [aFilters] predefined filter/s (can be either a filter or an array of filters)\n   * @param {object} [mParameters]\n   *\n   * @public\n   * @alias meteor-ui5.model.mongo.PropertyListBinding\n   * @extends sap.ui.model.Binding\n   */\n  var cPropertyListBinding = ListBinding.extend(\"meteor-ui5.model.mongo.PropertyListBinding\", {\n\n    constructor: function(oModel, sPath, oContext, aSorters, aFilters, mParameters) {\n\n      ListBinding.call(this, oModel, sPath, oContext, aSorters, aFilters, mParameters);\n\n      // Set up array for storing contexts\n      this._aContexts = [];\n\n      // Build and run query\n      this._runQuery();\n    }\n\n  });\n\n  cPropertyListBinding.prototype._runQuery = function() {\n    // Stop observing changes in any existing query.  Will run forever otherwise.\n    if (this._oQueryHandle) {\n      this._oQueryHandle.stop();\n    }\n\n    // Reset existing contexts\n    this._aContexts = [];\n    this._fireChange(ChangeReason.remove);\n\n    // Run query for context.\n    this._oCursor = this.oModel.runQuery(this.sPath, this.oContext, this.aSorters, this.aApplicationFilters);\n\n    // Create query handle so we can observe changes\n    // var that = this;\n    this._oQueryHandle = this._oCursor.observeChanges({\n      addedBefore: (id, fields, before) => {\n        this.fireDataReceived();\n        this._fireChange(ChangeReason.add);\n      },\n\n      changed: (id, fields) => {\n        //TODO performance - work out how to only update data that has changed\n        this.oModel.refresh();\n      },\n\n      removed: (id) => {\n        //TODO performance - work out how to only update data that has changed\n        this.oModel.refresh();\n      }\n    });\n  }\n\n  /**\n   * Returns an array of binding contexts for the bound target list.\n   *\n   * <strong>Note:</strong>The public usage of this method is deprecated, as calls from outside of controls will lead\n   * to unexpected side effects. For avoidance use {@link meteor-ui5.model.mongo.PropertyListBinding.prototype.getCurrentContexts}\n   * instead.\n   *\n   * @function\n   * @name meteor-ui5.model.mongo.PropertyListBinding.prototype.getContexts\n   * @param {int} [iStartIndex=0] the startIndex where to start the retrieval of contexts\n   * @param {int} [iLength=length of the list] determines how many contexts to retrieve beginning from the start index.\n   * @return {sap.ui.model.Context[]} the array of contexts for each row of the bound list\n   *\n   * @protected\n   */\n  cPropertyListBinding.prototype.getContexts = function(iStartIndex, iLength) {\n\n    // Get document containing property.  We used find instead of findOne to\n    // produce the cursor even though we will only ever get one document\n    // so that we can observeChanges on it.  Just get the first (only) document\n    // from the query handle.\n    this._aContexts = [];\n    var oDocument = this._oCursor.fetch()[0];\n    var aProperty = _.get(oDocument, this.sPath);\n    if (!Array.isArray(aProperty)){\n      //TODO use standard UI5 error handling here\n      console.error(this.sPath + \" is not an array.\");\n    } else {\n        aProperty.forEach((value, index) => {\n          // Create context\n          var sPath = this.oContext.sPath + \"/\" + this.sPath + \"[\" + index + \"]\"\n          const oContext = new Context(this.oModel, sPath);\n          this._aContexts.push(oContext);\n        })\n    }\n\n\n    const iStart = iStartIndex === undefined ? 0 : iStartIndex;\n    const iLen = iLength === undefined ? this.oModel.iSizeLimit - iStart : iLength;\n    return this._aContexts.slice(iStart).splice(0, iLen);\n  };\n\n  cPropertyListBinding.prototype.destroy = function() {\n    // Call stop on queryHandle on destroy of meteor model per docs:\n    // \"observeChanges returns a live query handle, which is an object with a\n    // stop method. Call stop with no arguments to stop calling the callback functions\n    // and tear down the query. The query will run forever until you call this. \"\n    if (this._oQueryHandle) {\n      this._oQueryHandle.stop();\n    }\n  };\n\n  /**\n   * Filters the list according to the filter definitions\n   *\n   * @function\n   * @name meteor-ui5.model.mongo.PropertyListBinding.prototype.filter\n   * @param {object[]} aFilters Array of filter objects\n   * @param {sap.ui.model.FilterType} sFilterType Type of the filter which should be adjusted, if it is not given, the standard behaviour applies\n   * @return {meteor-ui5.model.mongo.PropertyListBinding} returns <code>this</code> to facilitate method chaining\n   *\n   * @public\n   */\n  cPropertyListBinding.prototype.filter = function(aFilters, sFilterType) {\n    // Replace contents of aFilters property\n    this.aApplicationFilters = aFilters;\n\n    // Re-run query\n    this._runQuery();\n  };\n\n  /**\n   * Sorts the list according to the sorter object\n   *\n   * @function\n   * @name meteor-ui5.model.mongo.PropertyListBinding.prototype.sort\n   * @param {sap.ui.model.Sorter|Array} aSorters the Sorter object or an array of sorters which defines the sort order\n   * @return {meteor-ui5.model.mongo.PropertyListBinding} returns <code>this</code> to facilitate method chaining\n   * @public\n   */\n  cPropertyListBinding.prototype.sort = function(aSorters) {\n    // Replace contents of aSorters property\n    Array.isArray(aSorters) ? this.aSorters = aSorters : this.aSorters = [aSorters];\n\n    // Re-run query\n    this._runQuery();\n  };\n\n  /**\n   * Returns an array of currently used binding contexts of the bound control\n   *\n   * This method does not trigger any data requests from the backend or delta calculation, but just returns the context\n   * array as last requested by the control. This can be used by the application to get access to the data currently\n   * displayed by a list control.\n   *\n   * @return {sap.ui.model.Context[]} the array of contexts for each row of the bound list\n   * @since 1.28\n   * @public\n   */\n  cPropertyListBinding.prototype.getCurrentContexts = function() {\n    return this._aContexts;\n  };\n\n  /**\n   * Returns the number of entries in the list. This might be an estimated or preliminary length, in case\n   * the full length is not known yet, see method isLengthFinal().\n   *\n   * @return {int} returns the number of entries in the list\n   * @since 1.24\n   * @public\n   */\n  cPropertyListBinding.prototype.getLength = function() {\n    return this._aContexts.length;\n  };\n\n  /**\n   * Returns whether the length which can be retrieved using getLength() is a known, final length,\n   * or an preliminary or estimated length which may change if further data is requested.\n   *\n   * @return {boolean} returns whether the length is final\n   * @since 1.24\n   * @public\n   */\n  cPropertyListBinding.prototype.isLengthFinal = function() {\n    // TODO don't know what to do here yet.  Can't get this method\n    // to trigger and in any case, the only way to calculate if queryHandle.count()\n    // is final is to introduce subscriptions to the model which I've been\n    // keen to avoid as it will complicate the hell out of things whereas\n    // having it outside of the model is quite simple.  There's a discussion\n    // on the issue here:\n    // http://stackoverflow.com/questions/18744665/how-to-get-a-published-collections-total-count-regardless-of-a-specified-limit\n    // In the mean time return false;\n    return false;\n  };\n\n  /**\n   * Returns list of distinct values for the given relative binding path\n   *\n   * @param {string} sPath the relative binding path\n   * @return {Array} the array of distinct values.\n   *\n   * @public\n   */\n  cPropertyListBinding.prototype.getDistinctValues = function(sPath) {\n    // TODO what's supposed to go here?\n    return null;\n  };\n\n  /**\n   * Enable extended change detection\n   *\n   * @param {boolean} bDetectUpdates Whether changes within the same entity should cause a delete and insert command\n   * @param {function|string} vKey The path of the property containing the key or a function getting the context as only parameter to calculate a key to identify an entry\n   * @private\n   */\n  cPropertyListBinding.prototype.enableExtendedChangeDetection = function(bDetectUpdates, vKey) {\n\n    // TODO: BELOW CODE HAS BEEN COPIED VERBATIM FROM 'sap/ui/model/ListBinding'\n    // DON'T KNOW HOW IT WORKS AND WHAT IT IS SUPPOSED TO DO SO HOISTING INTO THIS CLASS\n    // TO OBSERVE IT. REPLACE OR DELETE IT WHEN ITS UNDERSTOOD\n\n    this.bUseExtendedChangeDetection = true;\n    this.bDetectUpdates = bDetectUpdates;\n    if (typeof vKey === \"string\") {\n      this.fnGetEntryKey = function(oContext) {\n        return oContext.getProperty(vKey);\n      };\n    } else if (typeof vKey === \"function\") {\n      this.fnGetEntryKey = vKey;\n    }\n    if (this.update) {\n      this.update();\n    }\n  };\n\n  return cPropertyListBinding;\n\n});\n"]}